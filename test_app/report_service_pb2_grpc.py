# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import report_service_pb2 as report__service__pb2


class ReportServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """

        # =========================================================
        #          Generated by grpc_tracer.proto_gen
        # =========================================================
        # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        import grpc_tracer
        my_intercepotor = grpc_tracer.ClientTracer()
        channel = grpc.intercept_channel(channel, my_intercepotor)
        # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        
        self.GetReport = channel.unary_unary(
                '/ReportService/GetReport',
                request_serializer=report__service__pb2.ReportId.SerializeToString,
                response_deserializer=report__service__pb2.Report.FromString,
                )


class ReportServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReportServiceServicer_to_server(servicer, server):

    # =========================================================
    #           Generated by grpc_tracer.proto_gen
    # =========================================================
    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    import grpc_tracer
    if  server._state.interceptor_pipeline is None  :
        server._state.interceptor_pipeline = grpc._interceptor.service_pipeline([grpc_tracer.ServerTracer()])
    else:
        list_interceptors = list(server._state.interceptor_pipeline.interceptors)
        list_interceptors.append(grpc_tracer.ServerTracer())
        server._state.interceptor_pipeline.interceptors = tuple(list_interceptors)
    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    rpc_method_handlers = {
            'GetReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReport,
                    request_deserializer=report__service__pb2.ReportId.FromString,
                    response_serializer=report__service__pb2.Report.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReportService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReportService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReportService/GetReport',
            report__service__pb2.ReportId.SerializeToString,
            report__service__pb2.Report.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
